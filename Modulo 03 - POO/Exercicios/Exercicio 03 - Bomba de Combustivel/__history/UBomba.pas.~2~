unit UBomba;

interface

Type
  TBomba = class
    private
      FTipoCombustivel : String;
      FValorPorLitro : Currency;
      FQtdCombustivel : Double;
      procedure SetQtdCombustivel(const Value: Double);
      procedure SetTipoCombustivel(const Value: String);
      procedure SetValorPorLitro(const Value: Currency);
      function GetQtdCombustivel: Double;
      function GetTipoCombustivel: String;
      function GetValorPorLitro: Currency;

    public
     property TipoCombustivel: String   read GetTipoCombustivel write SetTipoCombustivel;
     property ValorPorLitro:   Currency read GetValorPorLitro   write SetValorPorLitro;
     property QtdCombustivel:  Double   read GetQtdCombustivel  write SetQtdCombustivel;
     function AbastecerPorValor (aValor: String): String;
     function AbastecerPorLitro (aLitro: String): String;
     procedure AlterarValor (aValor: String);
     procedure AlterarCombustivel (aTipo: String);
     procedure AlterarQtdCombustivel (aQtd: String);
  end;

implementation

{ TBomba }

function TBomba.AbastecerPorLitro(aLitro: String): String;
  begin

  end;

function TBomba.AbastecerPorValor(aValor: String): String;
  begin

  end;

procedure TBomba.AlterarCombustivel(aTipo: String);
  begin

  end;

procedure TBomba.AlterarQtdCombustivel(aQtd: String);
  begin

  end;

procedure TBomba.AlterarValor(aValor: String);
  begin

  end;

function TBomba.GetQtdCombustivel: Double;
  begin
    Result := FQtdCombustivel;
  end;

function TBomba.GetTipoCombustivel: String;
  begin
    Result := FTipoCombustivel;
  end;

function TBomba.GetValorPorLitro: Currency;
  begin
    Result := FValorPorLitro;
  end;

procedure TBomba.SetQtdCombustivel(const Value: Double);
  begin
    FQtdCombustivel := Value;
  end;

procedure TBomba.SetTipoCombustivel(const Value: String);
  begin
    FTipoCombustivel := Value;
  end;

procedure TBomba.SetValorPorLitro(const Value: Currency);
  begin
    FValorPorLitro := Value;
  end;

end.
